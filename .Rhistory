}
loadData <- function() {
# Connect to the database
pcon <- dbConnect(psql, dbname = "ARL", host = "w0lxsfigssa01", port = 5432, user = "rscript", password = "rscript")
# Construct the fetching query
query <- sprintf("SELECT * FROM testing.rw_messages", table) #changed to 'testing.rw_messages' as the schema name was missing
# Submit the fetch query and disconnect
data <- dbGetQuery(pcon, query)
dbDisconnect(pcon)
data
}
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
)
# Oleksiy Anokhin
# January 14, 2018
# Set libraries
library(RPostgreSQL)
library(shiny)
# Define the fields we want to save from the form
fields <- c("id", "message")
# Shiny app with two fields that the user can submit data for
shinyApp(
ui = fluidPage(
DT::dataTableOutput("responses", width = 300), tags$hr(),
textInput("id", "ID", ""),
textInput("message", "MESSAGE", ""),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
psql <- dbDriver("PostgreSQL")
saveData <- function(data) {
# Connect to the database
pcon <- dbConnect(psql, dbname = "ARL", host = "w0lxsfigssa01", port = 5432, user = "rscript", password = "rscript")
# Construct the update query by looping over the data fields
query <- paste0("INSERT INTO testing.rw_messages (message) VALUES ( $1 )") #Changed to a parameterized query.  Read-up on "SQL Injection Attacks"
#using names(data) is ok, in principle.  But here names gives id,message
#and while that's true these are the table's columns, the id in this case is an
#auto-incrementing value that we don't set with the insert.  We leave it blank and
#it just generates the next value on its own
# Submit the update query and disconnect
dbSendQuery(pcon, query, params=data$message) #Changed from dbGetQuery to dbSendQuery
dbDisconnect(pcon)
}
loadData <- function() {
# Connect to the database
pcon <- dbConnect(psql, dbname = "ARL", host = "w0lxsfigssa01", port = 5432, user = "rscript", password = "rscript")
# Construct the fetching query
query <- sprintf("SELECT * FROM testing.rw_messages", table) #changed to 'testing.rw_messages' as the schema name was missing
# Submit the fetch query and disconnect
data <- dbGetQuery(pcon, query)
dbDisconnect(pcon)
data
}
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
)
# Oleksiy Anokhin
# January 14, 2018
# Set libraries
library(RPostgreSQL)
library(shiny)
# Define the fields we want to save from the form
fields <- c("id", "message")
# Shiny app with two fields that the user can submit data for
shinyApp(
ui = fluidPage(
DT::dataTableOutput("responses", width = 300), tags$hr(),
textInput("id", "ID", ""),
textInput("message", "MESSAGE", ""),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
psql <- dbDriver("PostgreSQL")
saveData <- function(data) {
# Connect to the database
pcon <- dbConnect(psql, dbname = "ARL", host = "w0lxsfigssa01", port = 5432, user = "rscript", password = "rscript")
# Construct the update query by looping over the data fields
query <- paste0("INSERT INTO testing.rw_messages (message) VALUES ( $1 )") #Changed to a parameterized query.  Read-up on "SQL Injection Attacks"
#using names(data) is ok, in principle.  But here names gives id,message
#and while that's true these are the table's columns, the id in this case is an
#auto-incrementing value that we don't set with the insert.  We leave it blank and
#it just generates the next value on its own
# Submit the update query and disconnect
dbSendQuery(pcon, query, params=data[["message"]]) #Changed from dbGetQuery to dbSendQuery
dbDisconnect(pcon)
}
loadData <- function() {
# Connect to the database
pcon <- dbConnect(psql, dbname = "ARL", host = "w0lxsfigssa01", port = 5432, user = "rscript", password = "rscript")
# Construct the fetching query
query <- sprintf("SELECT * FROM testing.rw_messages", table) #changed to 'testing.rw_messages' as the schema name was missing
# Submit the fetch query and disconnect
data <- dbGetQuery(pcon, query)
dbDisconnect(pcon)
data
}
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
)
# Oleksiy Anokhin
# January 14, 2018
# Set libraries
library(RPostgreSQL)
library(shiny)
# Define the fields we want to save from the form
fields <- c("id", "message")
# Shiny app with two fields that the user can submit data for
shinyApp(
ui = fluidPage(
DT::dataTableOutput("responses", width = 300), tags$hr(),
textInput("id", "ID", ""),
textInput("message", "MESSAGE", ""),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
psql <- dbDriver("PostgreSQL")
saveData <- function(data) {
# Connect to the database
pcon <- dbConnect(psql, dbname = "ARL", host = "w0lxsfigssa01", port = 5432, user = "rscript", password = "rscript")
# Construct the update query by looping over the data fields
query <- paste0("INSERT INTO testing.rw_messages (message) VALUES ( $1 )") #Changed to a parameterized query.  Read-up on "SQL Injection Attacks"
#using names(data) is ok, in principle.  But here names gives id,message
#and while that's true these are the table's columns, the id in this case is an
#auto-incrementing value that we don't set with the insert.  We leave it blank and
#it just generates the next value on its own
# Submit the update query and disconnect
dbSendQuery(pcon, query, params=data[["message"]]) #Changed from dbGetQuery to dbSendQuery
dbDisconnect(pcon)
}
loadData <- function() {
# Connect to the database
pcon <- dbConnect(psql, dbname = "ARL", host = "w0lxsfigssa01", port = 5432, user = "rscript", password = "rscript")
# Construct the fetching query
query <- sprintf("SELECT * FROM testing.rw_messages", table) #changed to 'testing.rw_messages' as the schema name was missing
# Submit the fetch query and disconnect
data <- dbGetQuery(pcon, query)
dbDisconnect(pcon)
data
}
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
)
# Oleksiy Anokhin
# January 14, 2018
# Set libraries
library(RPostgreSQL)
library(shiny)
# Define the fields we want to save from the form
fields <- c("id", "message")
# Shiny app with two fields that the user can submit data for
shinyApp(
ui = fluidPage(
DT::dataTableOutput("responses", width = 300), tags$hr(),
textInput("id", "ID", ""),
textInput("message", "MESSAGE", ""),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
psql <- dbDriver("PostgreSQL")
saveData <- function(data) {
# Connect to the database
pcon <- dbConnect(psql, dbname = "ARL", host = "w0lxsfigssa01", port = 5432, user = "rscript", password = "rscript")
# Construct the update query by looping over the data fields
query <- paste0("INSERT INTO testing.rw_messages (message) VALUES ( $1 )") #Changed to a parameterized query.  Read-up on "SQL Injection Attacks"
#using names(data) is ok, in principle.  But here names gives id,message
#and while that's true these are the table's columns, the id in this case is an
#auto-incrementing value that we don't set with the insert.  We leave it blank and
#it just generates the next value on its own
# Submit the update query and disconnect
dbSendQuery(pcon, query, params=data[["message"]]) #Changed from dbGetQuery to dbSendQuery
dbDisconnect(pcon)
}
loadData <- function() {
# Connect to the database
pcon <- dbConnect(psql, dbname = "ARL", host = "w0lxsfigssa01", port = 5432, user = "rscript", password = "rscript")
# Construct the fetching query
query <- sprintf("SELECT * FROM testing.rw_messages", table) #changed to 'testing.rw_messages' as the schema name was missing
# Submit the fetch query and disconnect
data <- dbGetQuery(pcon, query)
dbDisconnect(pcon)
data
}
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
)
# Oleksiy Anokhin
# January 14, 2018
# Set libraries
library(RPostgreSQL)
library(shiny)
# Define the fields we want to save from the form
fields <- c("id", "message")
# Shiny app with two fields that the user can submit data for
shinyApp(
ui = fluidPage(
DT::dataTableOutput("responses", width = 300), tags$hr(),
textInput("id", "ID", ""),
textInput("message", "MESSAGE", ""),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
psql <- dbDriver("PostgreSQL")
saveData <- function(data) {
# Connect to the database
pcon <- dbConnect(psql, dbname = "ARL", host = "w0lxsfigssa01", port = 5432, user = "rscript", password = "rscript")
# Construct the update query by looping over the data fields
query <- paste0("INSERT INTO testing.rw_messages (message) VALUES ( $1 )") #Changed to a parameterized query.  Read-up on "SQL Injection Attacks"
#using names(data) is ok, in principle.  But here names gives id,message
#and while that's true these are the table's columns, the id in this case is an
#auto-incrementing value that we don't set with the insert.  We leave it blank and
#it just generates the next value on its own.  It looks like in the Navicat you entered
#ID numbers manually.  This caused it not to auto-increment and resulted in a discrepancy between the
#next auto-incremental value and the value manually entered already
# Submit the update query and disconnect
dbSendQuery(pcon, query, params=data[["message"]]) #Changed from dbGetQuery to dbSendQuery
dbDisconnect(pcon)
}
loadData <- function() {
# Connect to the database
pcon <- dbConnect(psql, dbname = "ARL", host = "w0lxsfigssa01", port = 5432, user = "rscript", password = "rscript")
# Construct the fetching query
query <- sprintf("SELECT * FROM testing.rw_messages") #changed to 'testing.rw_messages' as the schema name was missing
# Submit the fetch query and disconnect
data <- dbGetQuery(pcon, query)
dbDisconnect(pcon)
data
}
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
)
getwd()
setwd("C:\\Users\\SHeitmann\\WBG\\Sinja Buri - FIG SSA MEL\\MEL Program Operations\\Knowledge Products\\Dashboards & Viz\\Benchmarking Excel online tool\\GitHub\\benchmark")
library(shiny); runApp('example.R')
runApp('example.R')
runApp('example.R')
runApp('example.R')
runApp('example.R')
runApp('example.R')
fields <- list(client_id="integer",
assessment_id="integer",
question_id="integer",
last_modified_time="timestamptz",
last_modified_user_id="int",
score="numeric",
rationale="text")
saving_data <- data.frame(client_id=11,assessment_id=24,question_id=15,last_modified_time=now(),last_modified_user_id=1,score=3,rationale="text")
conn <- poolCheckout(db_get_pool())
dbWriteTable(conn,name=c("public","_pd_dfsbenchmarking_save_client_assessment_data"),value=saving_data,append=TRUE,overwrite=FALSE,row.names=FALSE,field.types=fields)
poolReturn(conn)
source('Global.R')
conn <- poolCheckout(db_get_pool())
fields <- list(client_id="integer",
assessment_id="integer",
question_id="integer",
last_modified_time="timestamptz",
last_modified_user_id="int",
score="numeric",
rationale="text")
saving_data <- data.frame(client_id=11,assessment_id=24,question_id=15,last_modified_time=now(),last_modified_user_id=1,score=3,rationale="text")
dbWriteTable(conn,name=c("public","_pd_dfsbenchmarking_save_client_assessment_data"),value=saving_data,append=TRUE,overwrite=FALSE,row.names=FALSE,field.types=fields)
source('Global.R')
fields <- list(client_id="integer",assessment_id="integer",question_id="integer",last_modified_time="timestamptz",last_modified_user_id="int",score="numeric",rationale="text")
saving_data <- data.frame(client_id=11,assessment_id=24,question_id=15,last_modified_time=now(),last_modified_user_id=1,score=3,rationale="text")
conn <- poolCheckout(db_get_pool())
dbWriteTable(conn,name=c("public","_pd_dfsbenchmarking_save_client_assessment_data"),value=saving_data,append=TRUE,overwrite=FALSE,row.names=FALSE,field.types=fields)
poolReturn(conn)
source('C:/Users/SHeitmann/WBG/Sinja Buri - FIG SSA MEL/MEL Program Operations/Knowledge Products/Dashboards & Viz/Benchmarking Excel online tool/GitHub/benchmark/session_functions.R')
source('C:/Users/SHeitmann/WBG/Sinja Buri - FIG SSA MEL/MEL Program Operations/Knowledge Products/Dashboards & Viz/Benchmarking Excel online tool/GitHub/benchmark/session_functions.R')
source('C:/Users/SHeitmann/WBG/Sinja Buri - FIG SSA MEL/MEL Program Operations/Knowledge Products/Dashboards & Viz/Benchmarking Excel online tool/GitHub/benchmark/session_functions.R')
runApp('example.R')
getwd()
runApp('example.R')
runApp('example.R')
source('C:/Users/SHeitmann/WBG/Sinja Buri - FIG SSA MEL/MEL Program Operations/Knowledge Products/Dashboards & Viz/Benchmarking Excel online tool/GitHub/benchmark/session_functions.R')
runApp('example.R')
source('C:/Users/SHeitmann/WBG/Sinja Buri - FIG SSA MEL/MEL Program Operations/Knowledge Products/Dashboards & Viz/Benchmarking Excel online tool/GitHub/benchmark/session_functions.R')
source('C:/Users/SHeitmann/WBG/Sinja Buri - FIG SSA MEL/MEL Program Operations/Knowledge Products/Dashboards & Viz/Benchmarking Excel online tool/GitHub/benchmark/session_functions.R')
runApp('example.R')
runApp()
source('Global.R')
source('Global.R')
source('Global.R')
fields <- list(client_id="integer",assessment_id="integer",question_id="integer",last_modified_time="timestamptz",last_modified_user_id="int",score="numeric",rationale="varchar")
saving_data <- data.frame(client_id=11,assessment_id=24,question_id=15,last_modified_time=now(),last_modified_user_id=1,score=3,rationale="text")
conn <- poolCheckout(db_get_pool())
dbWriteTable(conn,name=c("public","_pd_dfsbenchmarking_save_client_assessment_data"),value=saving_data,append=TRUE,overwrite=FALSE,row.names=FALSE,field.types=fields)
poolReturn(conn)
source('Global.R')
fields <- list(client_id="integer",assessment_id="integer",question_id="integer",last_modified_time="timestamptz",last_modified_user_id="int",score="numeric",rationale="varchar")
saving_data <- data.frame(client_id=11,assessment_id=24,question_id=15,last_modified_time=now(),last_modified_user_id=1,score=3,rationale="text")
conn <- poolCheckout(db_get_pool())
dbWriteTable(conn,name=c("public","_pd_dfsbenchmarking_save_client_assessment_data"),value=saving_data,append=TRUE,overwrite=FALSE,row.names=FALSE,field.types=fields)
poolReturn(conn)
source('Global.R')
fields <- list(client_id="varchar",assessment_id="integer",question_id="integer",last_modified_time="timestamptz",last_modified_user_id="int",score="numeric",rationale="varchar")
saving_data <- data.frame(client_id=11,assessment_id=24,question_id=15,last_modified_time=now(),last_modified_user_id=1,score=3,rationale="text")
conn <- poolCheckout(db_get_pool())
dbWriteTable(conn,name=c("public","_pd_dfsbenchmarking_save_client_assessment_data"),value=saving_data,append=TRUE,overwrite=FALSE,row.names=FALSE,field.types=fields)
poolReturn(conn)
runApp('example.R')
source('C:/Users/SHeitmann/WBG/Sinja Buri - FIG SSA MEL/MEL Program Operations/Knowledge Products/Dashboards & Viz/Benchmarking Excel online tool/GitHub/benchmark/session_functions.R')
runApp('example.R')
runApp('example.R')
runApp('example.R')
?dbDeleteTavle
?dbDeleteTable
?dbDropTable
?dbRemoveTable
conn <- poolCheckout(db_get_pool())
#There's a vague chance that multiple users will be writing to table concurrently -- so it's never deleted
#dbWriteTable(conn,name=c("public","_pd_dfsbenchmarking_save_client_assessment_data"),value=saving_data,append=TRUE,overwrite=FALSE,row.names=FALSE,field.types=fields)
dbSendQuery(conn,"drop table if exists public._pd_dfsbenchmarking_save_client_assessment_data")
poolReturn(conn)
runApp('example.R')
runApp()
runApp()
runApp()
getwd()
db_login('MEL','FIGSSAMEL'
)
db_login('MEL','FIGSSAMEL')
db_disconnect()
db_login('MEL','FIGSSAMEL')
db_disconnect()
runApp()
runApp()
runApp()
db_login('MEL','FIGSSAMEL')
db_disconnect()
db_login('MEL','FIGSSAMEL')
db_disconnect()
db_login('MEL','FIGSSAMEL')
source(global.R)
getwd()
source('global.R')
db_disconnect()
runApp()
runApp()
nn
length("")
is.numeric("")
is.numeric(NA)
is.numeric(NULL)
runApp()
runApp()
is.numeric("23")
as.numeric(23)
as.numeric("23")
is.numeric(as.numeric("23"))
runApp()
source('C:/Users/SHeitmann/WBG/Sinja Buri - FIG SSA MEL/MEL Program Operations/Knowledge Products/Dashboards & Viz/Benchmarking Excel online tool/GitHub/benchmark/session_functions.R')
source('C:/Users/SHeitmann/WBG/Sinja Buri - FIG SSA MEL/MEL Program Operations/Knowledge Products/Dashboards & Viz/Benchmarking Excel online tool/GitHub/benchmark/session_functions.R')
runApp()
as.numeric("")
as.numeric(NULL)
is.numeric(as.numeric(NULL))
source('C:/Users/SHeitmann/WBG/Sinja Buri - FIG SSA MEL/MEL Program Operations/Knowledge Products/Dashboards & Viz/Benchmarking Excel online tool/GitHub/benchmark/session_functions.R')
source('C:/Users/SHeitmann/WBG/Sinja Buri - FIG SSA MEL/MEL Program Operations/Knowledge Products/Dashboards & Viz/Benchmarking Excel online tool/GitHub/benchmark/session_functions.R')
runApp()
runApp()
is.data.frame(NA)
source('C:/Users/SHeitmann/WBG/Sinja Buri - FIG SSA MEL/MEL Program Operations/Knowledge Products/Dashboards & Viz/Benchmarking Excel online tool/GitHub/benchmark/session_functions.R')
runApp()
db_disconnect()
source('global.R')
db_login('mbiallis','230984')
db_login('mbiallas','230984')
user<-db_login('mbiallas','230984')
get_db_session_id()
USER$session_id <- user$session_id
USER <- data.frame()
USER$session_id <- user$session_id
user$session_id
USER
USER$session_id <- user$session_id
USER[["session_id"]] <- user$session_id
USER <- data.frame(session_id=user$session_id)
get_db_session_id()
USER <- data.frame(db_session_id=user$session_id)
get_db_session_id()
USER <- data.frame(db_session_id=user$session_id,stringsAsFactors = F)
get_db_session_id()
get_client_listing()
db_get_client_listing(get_client_listing())
LISTINGS <- data.frame(client_listing=NULL)
db_get_client_listing(get_session_id())
db_get_client_listing(get_db_session_id())
db_disconnect()
user<-db_login('mbiallas','230984')
USER <- data.frame(db_session_id=user$session_id,stringsAsFactors = F)
db_get_client_listing(get_db_session_id())
LISTINGS$client_listing <- db_get_client_listing(get_db_session_id())
client_listing <- db_get_client_listing(get_db_session_id())
assessment_listing <- db_get_client_assessment_listing(get_db_session_id(),27)
assessment_listing
load_client_assessment(76)
load_client(27)
get_client_listing()
LISTINGS
LISTING
LISTINGS <- list()
LISTINGS$client_listing <- db_get_client_listing(get_db_session_id())
get_client_listing()
load_client(27)
load_client_assessment(76)
load_client_assessment(76)
ASSESSMENT <- list()
load_client_assessment(76)
runApp()
runApp()
db_disconnect()
runApp()
is.numeric(as.numeric("")))
is.numeric(as.numeric(""))
(as.numeric(""))
is.numeric(as.numeric(""))
is.numeric(NA)
source('C:/Users/SHeitmann/WBG/Sinja Buri - FIG SSA MEL/MEL Program Operations/Knowledge Products/Dashboards & Viz/Benchmarking Excel online tool/GitHub/benchmark/session_functions.R')
x<- ""
x==""
source('C:/Users/SHeitmann/WBG/Sinja Buri - FIG SSA MEL/MEL Program Operations/Knowledge Products/Dashboards & Viz/Benchmarking Excel online tool/GitHub/benchmark/session_functions.R')
if (is.null(selected_client_id) || is.na(selected_client_id) || selected_client_id == "" || !is.numeric(as.numeric(selected_client_id)))
return(warning(paste0("Warning: load_client bad input parameters for selected_client_id=",selected_client_id)))
source('C:/Users/SHeitmann/WBG/Sinja Buri - FIG SSA MEL/MEL Program Operations/Knowledge Products/Dashboards & Viz/Benchmarking Excel online tool/GitHub/benchmark/session_functions.R')
runApp()
runApp()
setwd("C:\\Users\\SHeitmann\\WBG\\Sinja Buri - FIG SSA MEL\\MEL Program Operations\\Knowledge Products\\Dashboards & Viz\\WBG Travel\\GitHub\\traveldash")
